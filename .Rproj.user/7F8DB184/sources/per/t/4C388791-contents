---
title: "Tutoral"
author: "Sungcheol Kim"
date: "2/15/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
```

## Generate sample classifer

```{r}
# generate labels
y <- generate.labels(N = 10000, rho=0.5)

# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
```

## Sampling for class probability at given rank

```{r}
# N is a maximum rank, M is the number of sampling

cp <- score.to.classprob(gc, N=400, M=400, debug.flag=T)
```

```{r}
df <- data.table()
df$x <- cp$rank
df$y <- cp$prob
l <- lambda.auc(0.9)
k <- nls(y ~ fermi(x, l1, l2), data=df, start = list(l1=l['l1'], l2=l['l2']))
```

```{r}
Mlist <- c(100, 200, 300, 400)
res <- data.table(method=c('rank', 'Pxy sample', 'Pxy sum'))

for (M in Mlist) {
  cp <- score.to.classprob(gc, N=200, M=M, debug.flag=F)
  t <- c(auc.rank(cp), auc.Pxysample(cp), auc.Pxysum(cp))
  res <- cbind(res, t)
}

cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
res
```

## Calculation AUC

To check $\Delta = <r|1> - <r|0>$, we can calculate $<r|1>$ and $<r|0>$ seperately. 

```{r}
rankprob <- cp

print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
```

```{r}
sigma.rank(rankprob, debug.flag = T)
```

```{r}
auc.rank(rankprob)
```

```{r}
rankprob <- cal.fromRank(rankprob)
```

```{r}
plot.curves(rankprob)
```

Calculate Pxy by sampling two ranks from class 1 and class 2

```{r}
auc.Pxysample(rankprob, iter = 10000)
```

Calculate Pxy using summation over all possible conditions.

```{r}
auc.Pxysum(rankprob, debug.flag = T)
```

```{r}
library(pROC)
roc_test <- roc(gc$y, gc$score)
auc(roc_test)
```

```{r}
plot(roc_test, xlim=c(1,0), ylim=c(0,1))
```

```{r}
plot.scores(gc)
```

## Confidence Interval

```{r}
Pxxy.sample(rankprob, iter=5000, debug.flag=T)
```

```{r}
Pxxy.sum(rankprob)
```

```{r}
Pxxy.sum2(rankprob)
```

```{r}
Pxyy.sample(rankprob, iter=5000, debug.flag=T)
```

```{r}
Pxyy.sum(rankprob)
```

```{r}
Pxyy.sum2(rankprob)
```


```{r}
var.auc(rankprob, debug.flag = T)
```

```{r}
ci(roc_test)
```

```{r}
var_auc_fermi(0.9, 100, 100, debug.flag = T)
```

```{r}
auc
```

```{r}
var_auc_fermi(0.895, 283, 25374, iter=8000, debug.flag = T)
```

```{r}
var_auc_fermi(0.942, 780, 67228, iter=10000, debug.flag = T)
```

```{r}
count <- 0
for (i in 1:10) {
  for (j in 1:10) {
    for (k in 1:10) {
      if (i < min(c(j, k))) {
        print(sprintf("(%d, %d, %d)", i, j, k))
        count <- count + 1
      }
    }
  }
}
print(count)
```

```{r}
count <- 0
m2 <- matrix(100, 10, 10)

for (i in 1:10) {
  idx <- (m2 > 0)
  idx[, 1:i] <- FALSE
  idx[1:i, ] <- FALSE
  diag(idx) <- FALSE
  
  print(idx)
  count <- count + sum(idx)
}
print(count)
```
