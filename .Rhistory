gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
class(y) == 'label'
devtools::load_all(".")
# generate labels
y <- generate.labels(N = 1000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
devtools::load_all(".")
# generate labels
y <- generate.labels(N = 1000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
# generate labels
y <- generate.labels(N = 100000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
# generate labels
y <- generate.labels(N = 1000000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
# generate labels
y <- generate.labels(N = 10000000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
# generate labels
y <- generate.labels(N = 1000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
devtools::load_all(".")
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.7, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
g1 <- plot.scores(data.table(score=gs, y=y))
g1 <- plot.scores(gs, y)
g1
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
#pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
cal_prc(gs, y, N=100, M=100)
# N is a maximum rank, M is the number of sampling
#pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
cal_pcr(gs, y, N=100, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
#pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
cal_pcr(gs, y, N=100, M=100)
# N is a maximum rank, M is the number of sampling
#pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
class(y)
class(y) == 'label'
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# generate labels
y <- generate.labels(N = 10000, rho=0.6)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.8, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
g1 <- plot.scores(gs, y)
g1
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# generate labels
y <- generate.labels(N = 10000, rho=0.6)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
g1 <- plot.scores(gs, y)
g1
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
auc.pcr(pcr1)
auc.pcr(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=100, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=100, M=600)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=100, M=600)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=100, M=200)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=200, M=200)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=200, M=200)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=200, M=500)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=200, M=800)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
sqrt(sum(pcr1$sd^2))
sqrt(sum(pcr1$sd^2))/800
sqrt(sum(pcr1$sd^2)/800)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=200, M=800)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
sqrt(sum(pcr1$sd^2))
sqrt(sum(pcr1$sd^2)/800)
plot(pcr1$sd)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
plot(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
plot(pcr1)
# generate labels
y <- generate.labels(N = 10000, rho=0.2)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
g1 <- plot.scores(gs, y)
g1
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
library(pROC)
roc_test <- roc(y, gs)
auc(roc_test)
ci(roc_test)
?ci
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
# generate labels
y <- generate.labels(N = 10000, rho=0.2)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
g1 <- plot.scores(gs, y)
g1
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
pcr1
devtools::load_all(".")
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
print(pcr1)
auc.Pxysum(pcr1)
pcr1$prob
auc.Pxysum(pcr1)
order(pcr1$rank)
class(pcr1)
a = data.table()
class(a)
devtools::load_all(".")
# generate labels
y <- generate.labels(N = 10000, rho=0.2)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
g1 <- plot.scores(gs, y)
g1
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
print(pcr1)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
print(pcr1)
# generate labels
y <- generate.labels(N = 10000, rho=0.2)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
#gc <- score.to.classprob(gc, debug.flag = T)
# generate labels
y <- generate.labels(N = 10000, rho=0.4)
# generate scores with a specific AUC from gaussian distribution
gs <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
g1 <- plot.scores(gs, y)
g1
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
plot(pcr1)
#cal_pcr(gs, y, N=10, M=100)
# N is a maximum rank, M is the number of sampling
pcr1 <- pcr(gs, y, N=400, M=400)
#plot(pcr1)
print(pcr1)
Mlist <- (1:10)*100
res <- data.table()
for (M in Mlist) {
pcr1 <- pcr(gs, y, N=400, M)
t <- print(pcr1)
res <- cbind(res, t)
}
#cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
res
Mlist <- (1:10)*100
res <- data.table()
for (M in Mlist) {
pcr1 <- pcr(gs, y, N=400, M)
t <- print(pcr1)
res <- rbind(res, t)
}
#cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
res
ggplot(data=res) + geom_point(aes(x=auc0, y=auc_pcr, color=M)) + theme_classic()
Mlist <- (1:10)*100
Nlist <- (1:10)*100
res <- data.table()
for (N in Nlist) {
for (M in Mlist) {
pcr1 <- pcr(gs, y, N=N, M=M)
t <- print(pcr1)
res <- rbind(res, t)
}
}
#cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
res
ggplot(data=res) + geom_point(aes(x=N, y=auc0, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pcr, color=M))
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum, color=M)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum, color=M)) + geom_hline(yintercept = res$auc0[[1]]) +
facet_grid(auc_pcr ~ auc_pxysum)
ggplot(data=res) + geom_line(aes(x=N, y=auc_pcr, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum, color=M)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum, color=M)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=M, y=auc_pcr, color=N)) + theme_classic() +
geom_point(aes(x=M, y=auc_pxysum, color=N)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=auc_pxysum, y=auc_pcr, color=N)) + theme_classic() +
geom_point(aes(x=auc_pxysample, y=auc_pcr, color=N)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=auc_pxysum, y=auc_pcr)) + theme_classic() +
geom_point(aes(x=auc_pxysample, y=auc_pcr)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=auc_pxysum, y=auc_pcr), color='red') + theme_classic() +
geom_point(aes(x=auc_pxysample, y=auc_pcr), color='blue') + geom_hline(yintercept = res$auc0[[1]])
auclist <- c(0.7, 0.75, 0.8, 0.85, 0.9)
Mlist <- (1:10)*100
Nlist <- (1:10)*100
res <- data.table()
for (a in auclist) {
for (N in Nlist) {
for (M in Mlist) {
pcr1 <- pcr(gs, y, N=N, M=M)
t <- print(pcr1)
res <- rbind(res, t)
}
}
}
#cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
res
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum, color=M)) + geom_hline(yintercept = res$auc0[[1]])
auclist <- c(0.7, 0.75, 0.8, 0.85, 0.9)
Mlist <- (2:6)*200
Nlist <- (1:5)*100
res <- data.table()
y <- generate.labels(N = 10000, rho=0.5)
for (a in auclist) {
gs <- classifier.gaussian(y, auc=a, tol = 0.0001)
for (N in Nlist) {
for (M in Mlist) {
pcr1 <- pcr(gs, y, N=N, M=M)
t <- print(pcr1)
res <- rbind(res, t)
}
}
}
#cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
res
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum, color=M)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=M, y=auc_pcr, color=N)) + theme_classic() +
geom_point(aes(x=M, y=auc_pxysum, color=N)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=auc_pxysum, y=auc_pcr), color='red') + theme_classic() +
geom_point(aes(x=auc_pxysample, y=auc_pcr), color='blue') + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=auc_pxysum, y=auc_pcr), color='red') + theme_classic() +
geom_point(aes(x=auc_pxysample, y=auc_pcr), color='blue') + geom_abline(slope=1)
ggplot(data=res) + geom_point(aes(x=auc0, y=auc_pcr), color=M) + theme_classic() +
geom_point(aes(x=auc0, y=auc_pxysum), color=M) + geom_abline(slope=1)
ggplot(data=res) + geom_point(aes(x=auc0, y=auc_pcr), color=N) + theme_classic() +
geom_point(aes(x=auc0, y=auc_pxysum), color=N) + geom_abline(slope=1)
ggplot(data=res) + geom_point(aes(x=auc0, y=auc_pcr), color=N) + theme_classic() +
geom_point(aes(x=auc_pcr, y=auc_pxysum)) + geom_abline(slope=1) +
geom_point(aes(x=auc_pcr, y=auc_pxysample))
ggplot(data=res) + geom_point(aes(x=auc0, y=auc_pcr), color=N) + theme_classic() +
geom_point(aes(x=auc_pcr, y=auc_pxysum), color='red') + geom_abline(slope=1) +
geom_point(aes(x=auc_pcr, y=auc_pxysample), color='blue')
ggplot(data=res) + geom_point(aes(x=auc0, y=auc_pcr), color='black') + theme_classic() +
geom_point(aes(x=auc_pcr, y=auc_pxysum), color='red') + geom_abline(slope=1) +
geom_point(aes(x=auc_pcr, y=auc_pxysample), color='blue')
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr/auc0, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum/auc_prc, color=M)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr/auc0, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum/auc_pcr, color=M)) + geom_hline(yintercept = res$auc0[[1]])
ggplot(data=res) + geom_point(aes(x=N, y=auc_pcr/auc0, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum/auc_pcr, color=M))
ggplot(data=res[res$M == 400, ]) + geom_point(aes(x=N, y=auc_pcr/auc0, color=M)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum/auc_pcr, color=M))
ggplot(data=res[res$M == 400, ]) + geom_point(aes(x=N, y=auc_pcr/auc0, color=auc0)) + theme_classic() +
geom_point(aes(x=N, y=auc_pxysum/auc_pcr, color=M))
ggplot(data=res[res$M == 400, ]) + geom_point(aes(x=N, y=auc_pcr/auc0, color=auc0)) + theme_classic()
remotes::install_github("learn-ensemble/R-SUMMA")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(summa)
library(summa)
data_binary <- create_predictions(3000, 30, 0.3, "binary")
library(summa)
data_binary <- create_predictions(3000, 30, 0.3, "binary")
head(data_binary)
library(summa)
data_binary <- create_predictions(3000, 30, 0.3, "binary")
str(data_binary)
summ <- summa(data_binary$predictions, "binary")
summ <- calculate_performance(summ, data_binary$actual_labels)
summa_plot(summ)
library(summa)
data_binary <- create_predictions(3000, 30, 0.3, "rank")
str(data_binary)
summ <- summa(data_binary$predictions, "binary")
summ <- summa(data_binary$predictions, "rank")
summ <- calculate_performance(summ, data_binary$actual_labels)
summa_plot(summ)
dim(data_binary$predictions)
list.dirs("*.csv")
dirname <- 'cat_maxAUC_0.78'
flist <- list.dirs(paste0(dirname, '/*.csv'))
a <- fread(paste0(dirname, '/0.613.csv'))
b <- fread(paste0(dirname, '/0.643.csv'))
c <- fread(paste0(dirname, '/0.693.csv'))
?list.dirs
dirname <- 'cat_maxAUC_0.78'
flist <- list.dirs(path=dirname, pattern='*.csv')
dirname <- 'cat_maxAUC_0.78'
flist <- list.filesΩ(path=dirname, pattern='*.csv')
dirname <- 'cat_maxAUC_0.78'
flist <- list.filespath=dirname, pattern='*.csv')
dirname <- 'cat_maxAUC_0.78'
flist <- list.files(path=dirname, pattern='*.csv')
a <- fread(paste0(dirname, '/0.613.csv'))
b <- fread(paste0(dirname, '/0.643.csv'))
c <- fread(paste0(dirname, '/0.693.csv'))
dirname <- 'cat_maxAUC_0.78'
flist <- list.files(path=dirname, pattern='*.csv')
predictions <- matrix(nrow = 400000, ncol=length(flist))
i <- 1
for (f in flist) {
tmp <- fread(paste0(dirname, '/', f))
predictions[ ,i] <- tmp[[2]]
i <- i + 1
}
dim(predictions)
head(predictions)
hist(predictions[[1]])
hist(predictions[, 1])
ksumma <- summa(predictions, "rank")
ksumma@estimated_performance
summ@estimated_performance
