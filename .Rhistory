cp <- score.to.classprob(gc, N=200, M=M, debug.flag=F)
t <- c(auc.rank(cp), auc.Pxysample(cp), auc.Pxysum(cp))
res <- cbind(res, t)
}
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
res
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
sigma.rank(gc, debug.flag = T)
sigma.rank(cp, debug.flag = T)
auc.rank(rankprob)
auc.Pxysample(rankprob, iter = 10000)
auc.Pxysum(rankprob, debug.flag = T)
library(pROC)
roc_test <- roc(gc$y, gc$score)
auc(roc_test)
plot.scores(gc)
ci(roc_test)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=100, M=200, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=400, M=200, debug.flag=T)
sigma.rank(cp, debug.flag = T)
auc.rank(rankprob)
auc.rank(rankprob)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=400, M=200, debug.flag=T)
auc.rank(cp)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=100, M=200, debug.flag=T)
auc.rank(cp)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
auc.rank(cp)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
auc.rank(cp)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=600, debug.flag=T)
auc.rank(cp)
auc.rank(gc)
?var
?var
source('~/CoreData/git_repos/FDclassifieR/R/ranked.R', echo=TRUE)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=600, debug.flag=T)
source('~/CoreData/git_repos/FDclassifieR/R/ranked.R', echo=TRUE)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=600, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=600, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=600, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=10, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
sigma.rank(cp, debug.flag = T)
auc.rank(cp)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=100, M=200, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=400, M=200, debug.flag=T)
auc.rank(cp)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=600, M=200, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=600, M=400, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=400, M=600, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=100, debug.flag=T)
sigma.rank(cp, debug.flag = T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=1000, M=10, debug.flag=T)
sigma.rank(cp, debug.flag = T)
auc.rank(cp)
?var
devtools::load_all(".")
?var
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=100, M=100, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=20, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=300, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
sigma.rank(cp, debug.flag = T)
auc.rank(cp)
auc.rank(cp)
sigma.rank(rankprob, debug.flag = T)
auc.rank(rankprob)
rankprob <- cal.fromRank(rankprob)
plot(rankprob$tpr, rankprob$fpr)
plot(rankprob$fpr, rankprob$tpr)
plot(rankprob$fpr, 1-rankprob$tpr)
plot(rankprob$fpr, rankprob$tpr)
plot(1-rankprob$fpr, rankprob$tpr)
plot(rankprob$fpr, rankprob$tpr)
par(mfrow=c(2,2))
plot(rankprob$fpr, rankprob$tpr)
plot(rankprob$rank, rankprob$bac)
plot(rankprob$rank, rankprob$prec)
par(mfrow=c(2,2))
plot(rankprob$fpr, rankprob$tpr)
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec)
par(mfrow=c(2,2))
plot(rankprob$fpr, rankprob$tpr)
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec, ylim=c(0,1))
par(mfrow=c(2,2))
plot(rankprob$fpr, rankprob$tpr)
lines(c(0,1), c(0,1))
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec, ylim=c(0,1))
par(mfrow=c(2,2))
plot(rankprob$fpr, rankprob$tpr)
lines(c(0,1), c(0,1))
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec, ylim=c(0,1))
lines(c(0, 0.5), c(0,0.5))
par(mfrow=c(2,2))
plot(rankprob$fpr, rankprob$tpr)
lines(c(0,1), c(0,1))
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec, ylim=c(0,1))
lines(c(0, 0.5), c(1.0,0.5))
par(mfrow=c(2,2))
plot(rankprob$fpr, rankprob$tpr)
lines(c(0,1), c(0,1))
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec, ylim=c(0,1))
lines(c(0, 1), c(.5,0.5))
par(mfrow=c(3,1))
plot(rankprob$fpr, rankprob$tpr)
lines(c(0,1), c(0,1))
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec, ylim=c(0,1))
lines(c(0, 1), c(.5,0.5))
par(mfrow=c(1,3))
plot(rankprob$fpr, rankprob$tpr)
lines(c(0,1), c(0,1))
plot(rankprob$rank, rankprob$bac)
plot(rankprob$tpr, rankprob$prec, ylim=c(0,1))
lines(c(0, 1), c(.5,0.5))
library(ggpubr)
devtools::load_all(".")
devtools::load_all(".")
plot.curves(scores)
devtools::load_all(".")
plot.curves(scores)
plot.curves(rankprob)
g <- plot.curves(rankprob)
g <- plot.curves(rankprob)
g
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
?annotate
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
sum(rankprob$bac)/200
0.6994*2-0.5
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
devtools::load_all(".")
plot.curves(rankprob)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
?nls
nls( ~ fermi, data=cp$prob, start = c(0, 1))
df <- data.table(x=cp$rank, y=cp$prob)
nls( ~ fermi, data=df, start = c(0, 1))
df <- data.table()
df$x <- cp$rank
df$y <- cp$prob
nls( ~ fermi, data=df, start = c(0, 1))
df <- data.table()
df$x <- cp$rank
df$y <- cp$prob
nls(y ~ fermi(x, l1, l2), data=df, start = list(l1=1, l2=1))
df <- data.table()
df$x <- cp$rank
df$y <- cp$prob
l <- lambda.auc(0.9)
nls(y ~ fermi(x, l1, l2), data=df, start = list(l1=1, l2=1))
df <- data.table()
df$x <- cp$rank
df$y <- cp$prob
l <- lambda.auc(0.9)
nls(y ~ fermi(x, l1, l2), data=df, start = list(l1=l$l1, l2=l$l2))
df <- data.table()
df$x <- cp$rank
df$y <- cp$prob
l <- lambda.auc(0.9)
nls(y ~ fermi(x, l1, l2), data=df, start = list(l1=l['l1'], l2=l['l2']))
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=10, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=10, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=10, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=10, M=10, debug.flag=T)
?floor
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=10, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=10, M=10, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=20, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=20, M=10, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=10, M=10, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=14, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=14, M=10, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=100, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
df <- data.table()
df$x <- cp$rank
df$y <- cp$prob
l <- lambda.auc(0.9)
k <- nls(y ~ fermi(x, l1, l2), data=df, start = list(l1=l['l1'], l2=l['l2']))
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
?nls
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
devtools::load_all(".")
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
# generate labels
y <- generate.labels(N = 10000, rho=0.2)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
rankprob <- cal.fromRank(rankprob)
plot.curves(rankprob)
# generate labels
y <- generate.labels(N = 10000, rho=0.8)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
sigma.rank(rankprob, debug.flag = T)
auc.rank(rankprob)
rankprob <- cal.fromRank(rankprob)
plot.curves(rankprob)
# generate labels
y <- generate.labels(N = 10000, rho=0.8)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.8, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.8, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
auc.rank(rankprob)
rankprob <- cal.fromRank(rankprob)
plot.curves(rankprob)
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
sigma.rank(rankprob, debug.flag = T)
auc.rank(rankprob)
auc.Pxysample(rankprob, iter = 10000)
auc.Pxysum(rankprob, debug.flag = T)
var.auc(rankprob, debug.flag = T)
auc.rank(rankprob)
# generate labels
y <- generate.labels(N = 10000, rho=0.5)
# generate scores with a specific AUC from gaussian distribution
gc <- classifier.gaussian(y, auc=0.9, tol = 0.0001)
gc <- score.to.classprob(gc, debug.flag = T)
gc
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=200, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=400, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=600, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=400, M=400, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=600, M=400, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=800, debug.flag=T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=200, M=1000, debug.flag=T)
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
var.auc(rankprob, debug.flag = T)
# N is a maximum rank, M is the number of sampling
cp <- score.to.classprob(gc, N=400, M=400, debug.flag=T)
rankprob <- cp
print(sum(rankprob$rank * rankprob$prob)/sum(rankprob$prob))
print(sum(rankprob$rank * (1 - rankprob$prob)/sum(1 - rankprob$prob)))
var.auc(rankprob, debug.flag = T)
