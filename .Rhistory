t1 <- train(t1, target~., training)
train <- as.data.table(readr::read_csv('data-CATII.csv.bz2'))
train$target <- ifelse(train$target == 1, "Yes", "No")
train <- train[sample(seq_along(train$target), 5000), ]
table(train$target)
inTraining0 <- createDataPartition(train$target, p = .75, list = FALSE)
training <- train[ inTraining0,]
testing  <- train[-inTraining0,]
testingY <- as_label(train$target, class1=1)
t1 <- train(t1, target~., training, update=TRUE)
devtools::load_all(".")
create.labels()
as_label(testingY)
unique(testingY)
devtools::load_all(".")
as_label(testingY)
unique(testingY)
unique(testingY)[1]
unique(testingY)[[1]]
devtools::load_all(".")
as_label(testingY)
as_label(testingY, class1='Yes')
create.scores.gaussian(testingY)
devtools::load_all(".")
create.scores.gaussian(testingY)
as_label(testingY)
devtools::load_all(".")
as_label(testingY)
create.scores.gaussian(testingY)
devtools::load_all(".")
as_label(testingY)
floor(5000*0.82)
devtools::load_all(".")
create.scores.gaussian(testingY)
devtools::load_all(".")
create.scores.gaussian(testingY)
create.scores.gaussian(as_label(testingY))
?as_label
?to_label
devtools::load_all(".")
create.scores.gaussian(testingY)
to_label(testingY)
attr(testingY, 'rho')
testingY
devtools::load_all(".")
create.scores.gaussian(testingY)
devtools::load_all(".")
create.scores.gaussian(testingY)
devtools::load_all(".")
create.auclist()
create_predictions()
devtools::load_all(".")
create_predictions()
devtools::load_all(".")
create_predictions()
create.auclist()
devtools::load_all(".")
create.auclist()
create_predictions()
devtools::load_all(".")
create_predictions()
devtools::load_all(".")
devtools::load_all(".")
create_predictions()
devtools::load_all(".")
create_predictions()
devtools::load_all(".")
create_predictions()
devtools::load_all(".")
create.labels()
y <- create.labels()
to_label(y)
devtools::load_all(".")
y <- create.labels()
y
create.scores.gaussian(0.8, y)
create.auclist()
create_predictions()
gs <- create_predictions()
devtools::load_all(".")
aut.rank(gs$predictions[,1], y)
auc.rank(gs$predictions[,1], y)
length(gs$predictions[,1])
length(y)
length(gs$predictions[,1], gs$actual_labels)
auc.rank(gs$predictions[,1], gs$actual_labels)
devtools::load_all(".")
auc.rank(gs$predictions[,1], gs$actual_labels, class1='Class2')
build_curve(gs$predictions[,1], gs$actual_labels)
devtools::load_all(".")
build_curve(gs$predictions[,1], gs$actual_labels)
devtools::load_all(".")
plot.scores(gs$predictions[,1], gs$actual_labels)
plot.scores(gs$predictions[,1])
devtools::load_all(".")
plot.scores(gs$predictions[,1])
df <- build_curve(gs$predictions[,1], gs$actual_labels)
plot.curves(df)
df <- build_curve(gs$predictions[,2], gs$actual_labels)
plot.curves(df)
gs <- create_predictions(n=100)
df <- build_curve(gs$predictions[,3], gs$actual_labels)
plot.curves(df)
df <- build_curve(gs$predictions[,3], gs$actual_labels, class1='Class1')
plot.curves(df)
df <- build_curve(gs$predictions[,3], gs$actual_labels, class1='Class2')
plot.curves(df)
plot.curves(build_curve(gs$predictions[,2], gs$actual_labels, class1='Class2'))
devtools::load_all(".")
gs <- create_predictions(n=100)
devtools::load_all(".")
gs <- create_predictions(n=100)
plot.curves(build_curve(gs$predictions[,2], gs$actual_labels, class1='Class2'))
plot.curves(build_curve(gs$predictions[,1], gs$actual_labels, class1='Class2'))
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,2], gs$actual_labels, class1='Class2'))
plot.curves(build_curve(gs$predictions[,1], gs$actual_labels, class1='Class2'))
devtools::load_all(".")
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,1], gs$actual_labels, class1='Class2'))
plot.curves(build_curve(gs$predictions[,1], gs$actual_labels, class1='Class1'))
plot.curves(build_curve(gs$predictions[,2], gs$actual_labels, class1='Class1'))
plot.curves(build_curve(gs$predictions[,3], gs$actual_labels, class1='Class1'))
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,4], gs$actual_labels, class1='Class1'))
plot.curves(build_curve(gs$predictions[,5], gs$actual_labels, class1='Class1'))
plot.curves(build_curve(gs$predictions[,`8`], gs$actual_labels, class1='Class1'))
plot.curves(build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1'))
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1'))
?rm
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1'))
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1'))
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1'))
df <- build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1')
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1'))
devtools::load_all(".")
plot.curves(build_curve(gs$predictions[,18], gs$actual_labels, class1='Class1'))
pcr(gs$predictions[,5], gs$actual_labels)
?pcr
devtools::load_all(".")
new_pcr(gs$predictions[,5], gs$actual_labels)
?size
?random
?rand
devtools::load_all(".")
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
devtools::load_all(".")
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 100)
devtools::load_all(".")
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 10, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 10, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 10, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 10, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 10, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 10, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
?sample
devtools::load_all(".")
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
devtools::load_all(".")
pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10)
build_curve_pcr(pcr_sample(gs$predictions[,3], gs$actual_labels, sample_size = 100, sample_n = 10))
a <- new_pcr(gs$predictions[,6], gs$actual_labels)
devtools::load_all(".")
devtools::load_all(".")
a <- new_pcr(gs$predictions[,6], gs$actual_labels)
plot(a)
devtools::load_all(".")
a <- new_pcr(gs$predictions[,6], gs$actual_labels)
a$info
attr(a, 'info')
devtools::load_all(".")
a <- new_pcr(gs$predictions[,6], gs$actual_labels)
plot(a)
devtools::load_all(".")
plot(a)
plot(a$prob)
devtools::load_all(".")
a <- new_pcr(gs$predictions[,6], gs$actual_labels, sample_size=50)
devtools::load_all(".")
a <- new_pcr(gs$predictions[,6], gs$actual_labels, sample_size=50)
a <- new_pcr(gs$predictions[,6], gs$actual_labels, sample_size=30)
a <- new_pcr(gs$predictions[,6], gs$actual_labels, sample_size=70)
plot(a$prob)
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
gs <- create_predictions()
a <- pcr(gs$predictions[,15], gs$actual_labels)
devtools::load_all(".")
a <- pcr(gs$predictions[,15], gs$actual_labels)
devtools::load_all(".")
a <- pcr(gs$predictions[,15], gs$actual_labels)
plot(a)
devtools::load_all(".")
plot(a)
?cor.test
devtools::load_all(".")
plot(a)
a <- pcr(gs$predictions[,10], gs$actual_labels)
plot(a)
plot.curves(a)
plot(a)
a <- pcr(gs$predictions[,10], gs$actual_labels, sample_n=200)
plot(a)
a <- pcr(gs$predictions[,5], gs$actual_labels, sample_n=200)
plot(a)
?cor.test
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
a <- pcr(gs$predictions[,5], gs$actual_labels, sample_n=300)
plot(a)
devtools::load_all(".")
devtools::load_all(".")
?TeX
library(latex2exp)
?TeX
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
?TeX
devtools::load_all(".")
?TeX
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
a <- pcr(gs$predictions[,1], gs$actual_labels)
check(a)
check.pcr(a)
devtools::load_all(".")
check.pcr(a)
devtools::load_all(".")
check.pcr(a)
devtools::load_all(".")
check.pcr(a)
devtools::load_all(".")
check.pcr(a)
plot(a)
devtools::load_all(".")
a <- pcr(gs$predictions[,1], gs$actual_labels)
check.pcr(a)
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
a <- pcr(gs$predictions[,2], gs$actual_labels)
plot(a)
a <- pcr(gs$predictions[,3], gs$actual_labels)
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
devtools::load_all(".")
plot(a)
a <- pcr(gs$predictions[,13], gs$actual_labels)
plot(a)
?var
devtools::load_all(".")
library(purrr)
library(FDclassifieR)
y <- create.labels(N=1000, rho=0.5)
table(y)
gs <- create.scores.gaussian(y, auc=0.9)
plot.scores(gs,y)
p1 <- pcr(gs, y)
check.pcr(p1)
plot(p1)
plot(p1)
p1 <- pcr(gs, y, sample_size = 100, sample_n = 400)
check.pcr(p1)
plot(p1)
devtools::load_all(".")
plot(p1)
devtools::load_all(".")
plot(p1)
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
check.pcr(p1)
plot(p1)
devtools::load_all(".")
check.pcr(p1)
p1$prob
fy <- fermi.b(p1$rank, 7.57, 0.5)
fy
devtools::load_all(".")
fy <- fermi.b(p1$rank, 7.57, 0.5, normalized = T)
fy
p1$rank
devtools::load_all(".")
fy <- fermi.b(p1$rank, 7.57, 0.5, normalized = T)
fy
?abs
fy*fy
?std
?sd
devtools::load_all(".")
check.pcr(p1)
devtools::load_all(".")
check.pcr(p1)
devtools::load_all(".")
check.pcr(p1)
y <- create.labels(N=10000, rho=0.5)
table(y)
gs <- create.scores.gaussian(y, auc=0.9)
plot.scores(gs,y)
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
check.pcr(p1)
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
res <- check.pcr(p1)
res <- c(res, sampleSize=100, sampleN=300)
print(res)
d <- data.table()
for (n in c(200, 300, 400, 500)) {
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
res <- check.pcr(p1)
res <- c(res, sampleSize=100, sampleN=300)
d <- rbind(d, res)
}
d
d <- data.table()
for (n in c(200, 300, 400, 500)) {
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
res <- check.pcr(p1)
res <- data.table(c(res, sampleSize=100, sampleN=300))
d <- rbind(d, res)
}
d
d <- data.table()
for (n in c(200, 300, 400, 500)) {
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
res <- check.pcr(p1)
res <- data.table(c(res, sampleSize=100, sampleN=300))
d <- cbind(d, res)
}
d
d <- data.table()
for (n in c(200, 300, 400, 500)) {
p1 <- pcr(gs, y, sample_size = 100, sample_n = 300)
res <- check.pcr(p1)
res <- t(c(res, sampleSize=100, sampleN=300))
d <- rbind(d, res)
}
d
d <- data.table()
for (n in c(200, 300, 400, 500)) {
p1 <- pcr(gs, y, sample_size = 100, sample_n = n)
res <- check.pcr(p1)
res <- t(c(res, sampleSize=100, sampleN=n))
d <- rbind(d, res)
}
d
d <- data.table()
for (n in c(200, 300, 400, 500, 700, 1000)) {
p1 <- pcr(gs, y, sample_size = 100, sample_n = n)
res <- check.pcr(p1)
res <- t(c(res, sampleSize=100, sampleN=n))
d <- rbind(d, res)
}
d
plot(p1)
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- to_label(Yeast[-inTraining0, ncol(Yeast)])
table(Yeast$Site)
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
devtools::load_all(".")
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
devtools::load_all(".")
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
devtools::load_all(".")
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
devtools::load_all(".")
devtools::load_all(".")
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
p1 <- pcr(fde1@predictions[,11], fde1@actual_label)
p1 <- pcr(fde1@predictions[,11], fde1@actual_label, sample_size = 100, sample_n = 200)
devtools::load_all(".")
p1 <- pcr(fde1@predictions[,11], fde1@actual_label, sample_size = 100, sample_n = 200)
plot(p1)
y <- fde1@actual_label
p1 <- pcr(fde1@predictions[,11], y, sample_size = 100, sample_n = 200)
y <- to_label(fde1@actual_label)
p1 <- pcr(fde1@predictions[,11], y, sample_size = 100, sample_n = 200)
plot(p1)
y <- to_label(fde1@actual_label, class1 = 'NUC')
p1 <- pcr(fde1@predictions[,11], y, sample_size = 100, sample_n = 200)
plot(p1)
y <- to_label(fde1@actual_label, class1 = 'NUC')
p1 <- pcr(fde1@predictions[,11], y, sample_size = 100, sample_n = 1000)
plot(p1)
length(y)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
dirname <- 'data_west_nile_maxAUC_0.85'
flist <- list.files(path=dirname, pattern='0.*.csv')
auclist <- as.numeric(gsub(".csv", "", flist))
train <- fread(paste0(dirname, '/', 'train.csv'))
y <- as.factor(train$WnvPresent)
rho <- sum(y == 1)/length(y)
predictions <- matrix(nrow = 116293, ncol=length(flist))
i <- 1
for (f in flist) {
tmp <- fread(paste0(dirname, '/', f))
predictions[ ,i] <- tmp[[2]]
i <- i + 1
}
dim(predictions)
y <- to_label(fde1@actual_label, class1 = 'NUC')
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
library(foreign)
set.seed(1024)
Seismic <- read.arff('data/seismic-bumps.arff')
Seismic$class <- as.factor(ifelse(Seismic$class == "0", "nonhaz", "haz"))
inTraining0 <- createDataPartition(Seismic$class, p = .75, list = FALSE)
training <- Seismic[ inTraining0,]
testing  <- Seismic[-inTraining0,]
testingY <- to_label(Seismic[-inTraining0, ncol(Seismic)])
table(Seismic$class)
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Seismic')
t1 <- train(t1, class~., training)
plot(t1)
summary(s1)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
y <- testingY
p1 <- pcr(t1@predictions[,10], y, sample_size = 100, sample_n = 1000)
y <- testingY
p1 <- pcr(t1$predictions[,10], y, sample_size = 100, sample_n = 1000)
plot(p1)
y <- testingY
p1 <- pcr(t1$predictions[,10], y, sample_size = 100, sample_n = 1000)
check.pcr(p1)
y <- testingY
p1 <- pcr(t1$predictions[,10], y, sample_size = 100, sample_n = 500)
check.pcr(p1)
plot(p1)
