Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- to_label(Iono[-inTraining0, ncol(Iono)])
table(Iono[, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_performance(fde1)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5), nsample=50)
plot_performance(fde1, nmethod_list=c(5,6,7), nsample=50)
plot_performance(fde1, nmethod_list=c(5,7,9), nsample=50)
devtools::load_all(".")
plot_performance(fde1, nmethod_list=c(5,7,9), nsample=50)
devtools::load_all(".")
plot_performance(fde1, nmethod_list=c(5,7,9), nsample=50)
devtools::load_all(".")
plot_performance(fde1, nmethod_list=c(5,7,9), nsample=50)
devtools::load_all(".")
plot_performance(fde1, nmethod_list=c(5,7,9), nsample=50)
plot_performance(fde1, nsample=20)
auclist <- create.auclist(0.51, 0.95, 50)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.5)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_performance(fde1, nsample=20)
devtools::load_all(".")
plot_performance(fde1, nsample=20)
devtools::load_all(".")
plot_performance(fde1, nsample=20)
devtools::load_all(".")
plot_performance(fde1, nsample=20)
devtools::load_all(".")
plot_performance(fde1, nsample=20)
plot_performance(fde1, nsample=20)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- to_label(Sonar[-inTraining0, ncol(Sonar)])
table(Sonar[,ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_performance(fde1, nsample=20)
devtools::load_all(".")
plot_performance(fde1, nsample=20)
plot_performance(fde1, nsample=20)
devtools::load_all(".")
plot_performance(fde1, nsample=20)
plot_performance(fde1, nsample=20, trendline=T)
devtools::load_all(".")
plot_performance(fde1, nsample=20, trendline=T)
plot_performance(fde1, nsample=20, trendline=F)
auclist <- create.auclist(0.51, 0.95, 50)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.5)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_performance(fde1, nsample=20)
plot_performance(fde1, nsample=20)
plot_performance(fde1, nsample=20)
plot_performance(fde1, nsample=20, trendline=T)
plot_performance(fde1, nsample=20, trendline=T)
plot_performance(fde1, nsample=20, trendline=T)
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- to_label(Iono[-inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_performance(fde1, nsample=20)
plot_performance(fde1, nsample=20, trendline=T)
plot_performance(fde1, nsample=20, trendline=T)
plot_performance(fde1, nsample=30, trendline=T)
plot_performance(fde1, nsample=30, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=30, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=30, trendline=F)
plot_performance(fde1, nsample=30, trendline=T)
auclist <- create.auclist(0.51, 0.95, 50)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.5)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_performance(fde1, nsample=30, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=T)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- to_label(Sonar[-inTraining0, ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=T)
plot_performance(fde1, nsample=50, trendline=T)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- to_label(Yeast[-inTraining0, ncol(Yeast)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_performance(fde1, nsample=50, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=50, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=50, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=50, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=100, trendline=F)
plot_performance(fde1, nsample=100, trendline=T)
plot_performance(fde1, nsample=100, trendline=T)
plot_performance(fde1, nsample=100, trendline=T)
plot_performance(fde1, nsample=100, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=T)
plot_performance(fde1, nsample=200, trendline=F)
plot_performance(fde1, nsample=200, trendline=F)
plot_performance(fde1, nsample=200, trendline=F)
plot_performance(fde1, nsample=200, trendline=F)
plot_performance(fde1, nsample=200, trendline=F)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
tmp <- read.csv('data/agaricus-lepiota.data', na.strings = '?')
tmp_names <- c('class', 'cap-shape', 'cap-surface', 'cap-color', 'bruises?', 'odor',
'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',
'stalk-shape', 'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring',
'stalk-color-above-ring', 'stalk-color-below-ring', 'veil-type', 'veil-color',
'ring-number', 'ring-type', 'spore-print-color', 'population', 'habitat')
names(tmp)<- tmp_names
t1 <- mtrainer(c('nnet', 'rda')) %>%
train(Class~., training, update=F) %>%
predict(newdata=testing)
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- to_label(Iono[-inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_performance(fde1, nsample=100, trendline=T)
plot_performance(fde1, nsample=100, trendline=F)
plot_performance(fde1, nsample=100, trendline=T)
plot_performance(fde1, nsample=100, trendline=T)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- to_label(Sonar[-inTraining0, ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_performance(fde1, nsample=100, trendline=F)
plot_performance(fde1, nsample=100, trendline=T)
plot_performance(fde1, nsample=100, trendline=T)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
plot_performance(fde1, nsample=50, trendline=F)
devtools::load_all(".")
plot_performance(fde1, nsample=50, trendline=F)
auclist <- create.auclist(0.51, 0.95, 50)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.5)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_performance(fde1, nsample=50, trendline=F)
plot_performance(fde1, nsample=100, trendline=F)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
df <- cal_partial_performance(fde1)
df
melt(df)
melt(df, id.vars = nmethod)
melt(df, id.vars = "nmethod")
melt(df, id.vars = "nmethod", variable.name='method', value.name='AUC')
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=20)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=30)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=30)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=30)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=50)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
devtools::load_all(".")
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- to_label(Sonar[-inTraining0, ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- to_label(Iono[-inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- to_label(Yeast[-inTraining0, ncol(Yeast)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY, alpha=5)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=5)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=7)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- to_label(Iono[-inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=7)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- to_label(Sonar[-inTraining0, ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=7)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
auclist <- create.auclist(0.51, 0.95, 50)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.5)
fde1 <- fde(data_rank$predictions)
fde1 <- calculate_performance(fde1, data_rank$actual_labels, alpha=7)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- to_label(Yeast[-inTraining0, ncol(Yeast)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=2)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=3)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=5)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=5)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:10, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=100)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=6)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=100)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- calculate_performance(fde1, testingY, alpha=7)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=100)
#plot_performance(fde1, nsample=100, trendline=F)
plot_performance_nmethods(fde1, nmethod_list = 3:15, nsample=100)
