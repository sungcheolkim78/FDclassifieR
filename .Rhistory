g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=rho, color=rho)) +
geom_point(aes(x=auc, y=sig_nor, group=rho, color=rho)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('r_{bac}/r^*')) + theme(legend.position='none')
g2
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma/\\sigma$'))
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma / \\sigma$'))
g2
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{KIM} / \\sigma_{Delong}$'))
# + theme(legend.position='none')
g2
tmp <- res
tmp$p <- as.factor(tmp$rho)
tmp$sig_auc_delong <- tmp$sig_auc_delong/1.96
g1 <- ggplot(data=tmp) + geom_line(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_point(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_abline(slope=1, linetype='dashed') + theme_classic() +
xlab(TeX('$\\sigma_{AUC}$ Delong')) + ylab(TeX('$\\sigma_{AUC}$ Kim')) +
theme(legend.position = c(0.9, 0.3),
legend.background = element_rect(color=cbPalette[1], linetype='solid')) +
xlim(c(0,0.0035)) + ylim(c(0,0.0035))
g1
tmp <- res
tmp$p <- as.factor(tmp$rho)
tmp$sig_auc_delong <- tmp$sig_auc_delong*1.96
g1 <- ggplot(data=tmp) + geom_line(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_point(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_abline(slope=1, linetype='dashed') + theme_classic() +
xlab(TeX('$\\sigma_{AUC}$ Delong')) + ylab(TeX('$\\sigma_{AUC}$ Kim')) +
theme(legend.position = c(0.9, 0.3),
legend.background = element_rect(color=cbPalette[1], linetype='solid')) +
xlim(c(0,0.0035)) + ylim(c(0,0.0035))
g1
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{KIM} / \\sigma_{Delong}$'))
# + theme(legend.position='none')
g2
g3 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=Pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=Pxxy, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('P_{xxy}'))
# + theme(legend.position='none')
g3
g3 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('P_{xxy}'))
# + theme(legend.position='none')
g3
g3 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_abline(slope = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('P_{xxy}'))
# + theme(legend.position='none')
g3
g3 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('AUC') + ylab(TeX('P_{xxy}'))
# + theme(legend.position='none')
g3
g3 <- ggplot(data=tmp) + theme_classic()
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('AUC') + ylab(TeX('P_{xxy}'))
g3 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('AUC') + ylab(TeX('P_{xxy}'))
# + theme(legend.position='none')
g3
g4 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxyy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxyy, group=p, color=p)) +
xlab('AUC') + ylab(TeX('P_{xyy}'))
# + theme(legend.position='none')
g4
g4 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxyy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxyy, group=p, color=p)) +
xlab('AUC') + ylab(TeX('P_{xyy}')) +
theme(legend.position='none')
g4
g3 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('AUC') + ylab(TeX('P_{xxy}')) +
theme(legend.position='none')
g3
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{KIM} / \\sigma_{Delong}$')) +
theme(legend.position='none')
g2
tmp <- res
tmp$p <- as.factor(tmp$rho)
tmp$sig_auc_delong <- tmp$sig_auc_delong*1.96
g1 <- ggplot(data=tmp) + geom_line(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_point(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_abline(slope=1, linetype='dashed') + theme_classic() +
xlab(TeX('Delong $\\sigma_{AUC}$')) + ylab(TeX('FD $\\sigma_{AUC}$')) +
theme(legend.position = c(0.9, 0.3),
legend.background = element_rect(color=cbPalette[1], linetype='solid')) +
xlim(c(0,0.0035)) + ylim(c(0,0.0035))
g1
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{FD} / \\sigma_{Delong}$')) +
theme(legend.position='none')
g2
g <- ggarrange(g1, g2, g3, g4, labels = c('A', 'B', 'C', 'D'), ncol = 2, nrow = 2)
ggsave("ci_total.pdf", width=7, height=6.5)
print(g)
tmp <- res
tmp$p <- as.factor(tmp$rho)
tmp$sig_auc_delong <- tmp$sig_auc_delong*1.96
g1 <- ggplot(data=tmp) + geom_line(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_point(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_abline(slope=1, linetype='dashed') + theme_classic() +
xlab(TeX('Delong $\\sigma_{AUC}$')) + ylab(TeX('FD $\\sigma_{AUC}$')) +
theme(legend.position='none') +
xlim(c(0,0.0035)) + ylim(c(0,0.0035))
g1
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{FD} / \\sigma_{Delong}$')) +
theme(legend.position = c(0.9, 0.3),
legend.background = element_rect(color=cbPalette[1], linetype='solid'))
g2
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{FD} / \\sigma_{Delong}$')) +
theme(legend.position = c(0.15, 0.3),
legend.background = element_rect(color=cbPalette[1], linetype='solid'))
g2
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{FD} / \\sigma_{Delong}$')) +
theme(legend.position = c(0.1, 0.3),
legend.background = element_rect(color=cbPalette[1], linetype='solid'))
g2
g3 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('P_{xy}') + ylab(TeX('P_{xxy}')) +
xlim(c(0.5,1)) + ylim(c(0.5,1)) +
theme(legend.position='none')
g3
g3 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('P_{xy}') + ylab(TeX('P_{xxy}')) +
geom_abline(slope = 1, linetype='dashed') +
theme(legend.position='none')
g3
g3 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('P_{xy}') + ylab(TeX('P_{xxy}')) +
geom_abline(slope = 1, linetype='dashed') +
xlim(c(0.4,1)) + ylim(c(0.4,1)) +
theme(legend.position='none')
g3
min_pxxy <- min(tmp$pxxy)
g3 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab('P_{xy}') + ylab(TeX('P_{xxy}')) +
geom_abline(slope = 1, linetype='dashed') +
xlim(c(min_pxxy,1)) + ylim(c(min_pxxy,1)) +
theme(legend.position='none')
g3
min_pxxy <- min(tmp$pxxy)
g3 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxxy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxxy, group=p, color=p)) +
xlab(TeX('P_{xy}')) + ylab(TeX('P_{xxy}')) +
geom_abline(slope = 1, linetype='dashed') +
xlim(c(min_pxxy,1)) + ylim(c(min_pxxy,1)) +
theme(legend.position='none')
g3
min_pxyy <- min(tmp$pxyy)
g4 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxyy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxyy, group=p, color=p)) +
xlab('AUC') + ylab(TeX('P_{xyy}')) +
geom_abline(slope = 1, linetype='dashed') +
xlim(c(min_pxyy,1)) + ylim(c(min_pxyy,1)) +
theme(legend.position='none')
g4
min_pxyy <- min(tmp$pxyy)
g4 <- ggplot(data=tmp) + theme_classic() +
geom_line(aes(x=auc, y=pxyy, group=p, color=p)) +
geom_point(aes(x=auc, y=pxyy, group=p, color=p)) +
xlab(TeX('P_{xy}')) + ylab(TeX('P_{xyy}')) +
geom_abline(slope = 1, linetype='dashed') +
xlim(c(min_pxyy,1)) + ylim(c(min_pxyy,1)) +
theme(legend.position='none')
g4
g <- ggarrange(g1, g3, g2, g4, labels = c('A', 'C', 'B', 'D'), ncol = 2, nrow = 2)
ggsave("ci_total.pdf", width=7, height=6.5)
print(g)
tmp$sig_nor <- tmp$sig_auc/tmp$sig_auc_delong
g2 <- ggplot(data=tmp) +
geom_line(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_point(aes(x=auc, y=sig_nor, group=p, color=p)) +
geom_hline(yintercept = 1, linetype='dashed') + theme_classic() +
xlab('AUC') + ylab(TeX('$\\sigma_{FD} / \\sigma_{Delong}$')) +
theme(legend.position = c(0.15, 0.35),
legend.background = element_rect(color=cbPalette[1], linetype='solid'))
g2
tmp <- res
tmp$p <- as.factor(tmp$rho)
tmp$sig_auc_delong <- tmp$sig_auc_delong*1.96
g1 <- ggplot(data=tmp) + geom_line(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_point(aes(x=sig_auc_delong, y=sig_auc, group=p, color=p)) +
geom_abline(slope=1, linetype='dashed') + theme_classic() +
xlab(TeX('$\\sigma_{AUC}$ (Delong)')) + ylab(TeX('$\\sigma_{AUC}$ (FD)')) +
theme(legend.position='none') +
xlim(c(0,0.0035)) + ylim(c(0,0.0035))
g1
g <- ggarrange(g1, g3, g2, g4, labels = c('A', 'C', 'B', 'D'), ncol = 2, nrow = 2)
ggsave("ci_total.pdf", width=7, height=6.5)
print(g)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
g2 <- plot.curves(ds)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# generate labels
y <- create.labels(N = 100000, rho=0.2)
# generate scores with a specific AUC from gaussian distribution
gs <- create.scores.gaussian(y, auc=0.9, tol = 0.0001)
library(data.table)
devtools::load_all(".")
# generate labels
y <- create.labels(N = 100000, rho=0.2)
# generate scores with a specific AUC from gaussian distribution
gs <- create.scores.gaussian(y, auc=0.9, tol = 0.0001)
ds <- build_curve(gs, y)
g1 <- plot.scores(gs, y)
g1
g2 <- plot.curves(ds)
g2
devtools::load_all(".")
g2 <- plot.curves(ds)
g2
g2 <- plot.curves(ds, filename='curves.png')
g2
install.packages('plotly')
devtools::load_all(".")
install.packages('ggpubr')
devtools::load_all(".")
install.packages("latex2exp")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
library(ggplot2)
library(latex2exp)
get_fermi(0.8, 0.1, N=10000)
auclist <- (2:48)*0.01 + 0.5
rholist <- (2:18)*0.05
N <-1000
res <- data.table()
for (a in auclist) {
for (r in rholist) {
temp <- get_fermi(a, r)
temp <- c(temp, a, r)
res <- cbind(res, temp)
}
}
res <- data.table(t(res))
colnames(res) <- c('beta', 'mu', 'rs', 'AUC', 'rho')
res
g1 <- ggplot(data=res) + geom_point(aes(x=AUC, y=mu, color=rho)) + theme_classic() +
xlab('AUC') + ylab(TeX('$\\mu/N$'))
#ggsave('lambda_auc_l1.pdf', width=6)
g1
g2 <- ggplot(data=res) + geom_point(aes(x=AUC, y=beta, color=rho)) + theme_classic() +
xlab('AUC') + ylab(TeX('$N \\beta$'))
#ggsave('lambda_auc_l2.pdf', width=6)
g2
g3 <- ggplot(data=res) + geom_point(aes(x=AUC, y=rs, color=rho)) + theme_classic() +
xlab('AUC') + ylab('R*/N')
#ggsave('lambda_auc_rs.pdf', width=6)
g3
g4 <- ggplot(data=res) + geom_point(aes(x=rho, y=mu, color=AUC)) + theme_classic() +
xlab(TeX('$\\rho')) + ylab(TeX('$\\mu / N$'))
g4
g5 <- ggplot(data=res) + geom_point(aes(x=rho, y=beta, color=AUC)) + theme_classic() +
xlab(TeX('$\\rho')) + ylab(TeX('$N \\beta'))
g5
library(ggpubr)
g <- ggarrange(g2, g1, g5, g4, labels=c("A", "B", "C", "D"), ncol=2  , nrow=2)
ggsave("betamu_relation.pdf", width=8, height=6, dpi=300)
g
install.packages("rlist")
library(mlbench)
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
devtools::load_all(".")
devtools::load_all(".")
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- Sonar[-inTraining0, ncol(Sonar)]
t1 <- mtrainer(c('nnet', 'rda', 'ctree'))
t1 <- train(t1, Class~., training, update=F)
s1 <- addmodel.summa(s1, c('C5.0', 'gbm'))
s1 <- addmodel.mtrainer(s1, c('C5.0', 'gbm'))
t1 <- addmodel.mtrainer(t1, c('C5.0', 'gbm'))
t1 <- train(t1, Class~., training, update=F)
plot(t1)
devtools::load_all(".")
(s1 <- predict(s1, newdata=testing, alpha=1, Y=testingY))
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
devtools::load_all(".")
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
?predict
library(caret)
?predict
?caret::predict.avNNet
predict(t1$fitlist[1], newdata=testing, type='prob')
str(predict(t1$fitlist[1], newdata=testing, type='prob'))
?smap
?sapply
devtools::load_all(".")
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
devtools::load_all(".")
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
t1 <- mtrainer(c('nnet', 'rda', 'ctree'))
t1 <- train(t1, Class~., training, update=F)
t1 <- addmodel.mtrainer(t1, c('C5.0', 'gbm'))
t1 <- train(t1, Class~., training, update=F)
plot(t1)
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
devtools::load_all(".")
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
?map
?lapply
devtools::load_all(".")
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda', 'ctree'))
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda', 'ctree'))
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda', 'ctree'))
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda', 'ctree'))
t1 <- train(t1, Class~., training, update=F)
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda', 'ctree'))
t1 <- mtrainer(c('nnet', 'rda'))
t1 <- train(t1, Class~., training, update=F)
plot(t1)
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
devtools::load_all(".")
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
devtools::load_all(".")
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
devtools::load_all(".")
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
devtools::load_all(".")
fde1 <- predict(t1, newdata=testing, alpha=1, Y=testingY)
attr(testingY, 'class1')
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
attr(testingY, 'class1')
devtools::load_all(".")
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
testingY
levels(testingY)
levels(testingY)[[1]]
devtools::load_all(".")
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
testingY
as_label(testingY)
labels(testingY)[[1]]
devtools::load_all(".")
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
testingY
class(testingY)
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- Sonar[-inTraining0, ncol(Sonar)]
class(testingY)
testingY
levels(testingY)
levels(testingY)[[1]]
sum(testingY=='M')/length(testingY)
as.character(testingY)
devtools::load_all(".")
as_label(testingY)
devtools::load_all(".")
as_label(testingY)
labels(testingY)
devtools::load_all(".")
as_label(testingY)
testingY
devtools::load_all(".")
as_label(testingY)
?levels
testingY
l <- labels(testingY)
l
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- Sonar[-inTraining0, ncol(Sonar)]
l <- labels(testingY)
l
as_label(testingY)
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- Sonar[-inTraining0, ncol(Sonar)]
as.factor(testingY)
a <- as.factor(testingY)
l <- levels(a)
l
l[1]
l[[1]]
devtools::load_all(".")
as_label(testingY)
testingY
as.factor(testingY)
