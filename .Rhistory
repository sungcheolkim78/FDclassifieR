<<<<<<< HEAD
=======
library(mlbench)
library(FDclassifieR)
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
t1 <- mtrainer(c('nnet', 'rda'), dataInfo = 'Sonar') %>%
train.mtrainer(Class~., training, update=F)
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda'), dataInfo = 'Sonar') %>%
train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
t1 <- t1 %>%
addmodel.mtrainer(c('mlp', 'nb', 'rf', 'rpart', 'xgbTree', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'earth', 'glm', 'avNNet', 'glmnet', 'simpls')) %>%
train(Class~., training, update=F)
t1 <- t1 %>%
addmodel.mtrainer(c('svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet')) %>%
train(Class~., training, update=F)
# 'xgbTree'
t1 <- t1 %>%
addmodel.mtrainer(c('mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'earth', 'glm', 'avNNet', 'glmnet', 'simpls')) %>%
train(Class~., training, update=F)
plot(t1)
fde1 <- fde(t1$predictions, testingY)
t1$predictions
t1 <- predict(t1, newdata=testing)
t1$predictions
plot_cor(fde1, legend_flag = T)
fde1 <- fde(t1$predictions, testingY)
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
t1$rank_matrix
fde1@rank_matrix
names(fde1@rank_matrix)
colnames(fde1@rank_matrix)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
fde1 <- fde(t1$predictions, testingY)
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
fde1 <- fde(t1$predictions, testingY)
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
?digit
?ddigits
?digits
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, legend_flag = T)
plot_cor(fde1, class_flag = 'negative', legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, class_flag = 'negative', legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, class_flag = 'negative', legend_flag = T)
plot_cor(fde1, class_flag = 'positive', legend_flag = T)
plot_cor(fde1, class_flag = 'negative', legend_flag = T)
devtools::load_all(".")
plot_cor(fde1, class_flag = 'negative', legend_flag = T)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
dirname <- 'cat_maxAUC_0.78'
flist <- list.files(path=dirname, pattern='0.*.csv')
auclist <- as.numeric(gsub(".csv", "", flist))
train <- fread(paste0(dirname, '/', 'train.csv'))
dirname <- 'data_cat_maxAUC_0.78'
flist <- list.files(path=dirname, pattern='0.*.csv')
auclist <- as.numeric(gsub(".csv", "", flist))
train <- fread(paste0(dirname, '/', 'train.csv'))
y <- as.factor(train$target)
rho <- sum(y == 1)/length(y)
predictions <- matrix(nrow = 400000, ncol=length(flist))
i <- 1
for (f in flist) {
tmp <- fread(paste0(dirname, '/', f))
predictions[ ,i] <- tmp[[2]]
i <- i + 1
}
dim(predictions)
fde1 <- fdensemble(predictions)
fde1 <- predict_performance(fde1, auclist, rho, alpha = 1)
plot_cor(fde1)
devtools::load_all(".")
plot_cor(fde1)
fde1 <- predict_performance(fde1, auclist, rho, alpha = 1)
plot_cor(fde1)
fde1 <- fdensemble(predictions)
fde1 <- predict_performance(fde1, auclist, rho, alpha = 1)
plot_cor(fde1)
devtools::load_all(".")
plot_cor(fde1)
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='negative')
devtools::load_all(".")
fde1 <- fdensemble(predictions)
fde1 <- predict_performance(fde1, auclist, rho, alpha = 1)
plot_cor(fde1, class_flag='negative')
plot_cor(fde1, class_flag='positive')
fde1@estimated_label
fde1@estimated_label == attr(fde1@estimated_label, 'class1')
devtools::load_all(".")
fde1 <- fdensemble(predictions)
fde1 <- predict_performance(fde1, auclist, rho, alpha = 1)
plot_cor(fde1, class_flag='positive')
fde1@estimated_label == attr(fde1@estimated_label, 'class1')
devtools::load_all(".")
plot_cor(fde1, class_flag='positive')
devtools::load_all(".")
plot_cor(fde1, class_flag='positive')
devtools::load_all(".")
fde1 <- fdensemble(predictions)
fde1 <- predict_performance(fde1, auclist, rho, alpha = 1)
plot_cor(fde1, class_flag='positive')
devtools::load_all(".")
plot_cor(fde1, class_flag='positive')
devtools::load_all(".")
plot_cor(fde1, class_flag='positive')
devtools::load_all(".")
plot_cor(fde1, class_flag='positive')
devtools::load_all(".")
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='negativr')
plot_cor(fde1, class_flag='negative')
fde1 <- fdensemble(predictions[,1:8])
fde1 <- predict_performance(fde1, auclist[1:8], rho, alpha = 1)
plot_cor(fde1, class_flag='positive')
devtools::load_all(".")
devtools::load_all(".")
fde1 <- predict_performance(fde1, auclist[1:8], rho, alpha = 1)
plot_cor(fde1, class_flag='positive')
fde1 <- fdensemble(predictions[,1:8])
fde1 <- predict_performance(fde1, auclist[1:8], rho, alpha = 1)
plot_cor(fde1, class_flag='positive')
submit <- data.table(id=seq(600000,999999), target=fde1@estimated_rank)
fwrite(submit, file='submission.csv')
dirname <- 'data_west_nile_maxAUC_0.85'
flist <- list.files(path=dirname, pattern='0.*.csv')
auclist <- as.numeric(gsub(".csv", "", flist))
train <- fread(paste0(dirname, '/', 'train.csv'))
y <- as.factor(train$WnvPresent)
rho <- sum(y == 1)/length(y)
predictions <- matrix(nrow = 116293, ncol=length(flist))
i <- 1
for (f in flist) {
tmp <- fread(paste0(dirname, '/', f))
predictions[ ,i] <- tmp[[2]]
i <- i + 1
}
dim(predictions)
fde1 <- fdensemble(predictions)
fde1 <- predict_performance(fde1, auclist, rho, alpha=1)
plot_cor(fde1, legend_flag=T)
plot_cor(fde1, class_flag='positive')
fde1 <- fdensemble(predictions[,1:9])
fde1 <- predict_performance(fde1, auclist, rho, alpha=1)
fde1 <- predict_performance(fde1, auclist[1:9], rho, alpha=1)
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='negative')
submit <- data.table(Id=seq(1,116293), WnvPresent=fde1@estimated_prob)
fwrite(submit, file='submission.csv')
dirname <- 'data_porto_maxGini_0.29'
flist <- list.files(path=dirname, pattern='0.*.csv')
auclist <- (as.numeric(gsub(".csv", "", flist)) + 1)/2
train <- fread(paste0(dirname, '/', 'train.csv'))
y <- as.factor(train$target)
rho <- sum(y == 1)/length(y)
predictions <- matrix(nrow = 892816, ncol=length(flist))
i <- 1
for (f in flist) {
tmp <- fread(paste0(dirname, '/', f))
predictions[ ,i] <- tmp[[2]]
i <- i + 1
}
dim(predictions)
fde1 <- fdensemble(predictions)
fde1 <- predict_performance(fde1, auclist, rho, alpha=1)
plot_cor(fde1)
devtools::load_all(".")
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='negative')
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
auclist <- create.auclist(0.6, 0.7, 10)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions)
plot_cor(fde1, legend_flag=T)
#fde1 <- calculate_performance(fde1, data_rank$actual_labels)
fde1 <- predict_performance(fde1, auclist, 0.1)
plot_cor(fde1, legend_flag=T)
fde1 <- fde(data_rank$predictions)
#fde1 <- calculate_performance(fde1, data_rank$actual_labels)
fde1 <- predict_performance(fde1, auclist, 0.1)
plot_cor(fde1, legend_flag=T)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, legend_flag=T)
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='negative')
auclist <- create.auclist(0.85, 0.95, 10)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='all')
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='negative')
library(mlbench)
library(FDclassifieR)
#set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
t1 <- mtrainer(c('nnet', 'rda'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
plot(t1)
t1 <- predict(t1, newdata=testing)
names(t1$fitlist)
devtools::load_all(".")
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
t1 <- mtrainer(c('nnet', 'rda'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
plot(t1)
t1 <- predict(t1, newdata=testing)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
t1 <- predict(t1, newdata=testing)
auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
fde1 <- fde(t1$predictions, testingY)
install.packages('xgboost')
install.packages("xgboost")
t1 <- mtrainer(c('nnet', 'rda', 'xgbTree'), dataInfo = 'Sonar')
devtools::load_all(".")
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
t1 <- mtrainer(c('nnet', 'rda', 'xgbTree'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda', 'xgbTree'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
devtools::load_all(".")
t1 <- mtrainer(c('nnet', 'rda', 'xgbTree'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
# 'xgbTree'
t1 <- train(t1, Class~., training, update=T)
t1 <- mtrainer(c('adaboost'), dataInfo = 'Sonar')
#%>%
#  train.mtrainer(Class~., training, update=F)
#predict(newdata=testing)
# 'xgbTree'
t1 <- train(t1, Class~., training, update=T)
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- train(t1, Class~., training, update=T)
plot(t1)
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_cor(fde1, class_flag = 'positive', legend_flag = T)
plot_cor(fde1, class_flag = 'all')
plot_cor(fde1, class_flag = 'positive')
plot_cor(fde1, class_flag = 'negative')
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- as_label(Iono[-inTraining0, ncol(Iono)])
table(Iono[ inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
t1 <- train(t1, Class~., training, update=T)
plot(s1)
plot(t1)
t1 <- predict(t1, newdata=testing)
auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions)
fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_cor(fde1)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_cor(fde1)
plot_cor(fde1, class_flag='positive')
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
table(Yeast$Site)
table(Iono[, ncol(Iono)])
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- as_label(Iono[-inTraining0, ncol(Iono)])
table(Iono[, ncol(Iono)])
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
table(Sonar[,ncol(Sonar)])
testingY
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- as_label(Iono[-inTraining0, ncol(Iono)])
testingY
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- train(t1, Site~., training, update=T)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
table(Yeast$Site)
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- train(t1, Site~., training, update=T)
plot(t1)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, tesingY)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_cor(fde1)
plot_cor(fde1, class_flag='positive')
plot_cor(fde1, class_flag='all')
t1$model_list
>>>>>>> 065a1c3bf858d11a9bb8ea9613fd4d98ebcdf449
plot_cor(fde1, class_flag='negtive')
plot_cor(fde1, class_flag='negative')
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
library(foreign)
set.seed(1024)
Seismic <- read.arff('data/seismic-bumps.arff')
Seismic$class <- as.factor(ifelse(Seismic$class == "0", "nonhaz", "haz"))
inTraining0 <- createDataPartition(Seismic$class, p = .75, list = FALSE)
training <- Seismic[ inTraining0,]
testing  <- Seismic[-inTraining0,]
testingY <- as_label(Seismic[-inTraining0, ncol(Seismic)])
table(Seismic$class)
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Seismic')
t1 <- train(t1, class~., training)
install.packages("languageserver")
t1 <- train(t1, class~., training)
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
library(foreign)
set.seed(1024)
Seismic <- read.arff('data/seismic-bumps.arff')
Seismic$class <- as.factor(ifelse(Seismic$class == "0", "nonhaz", "haz"))
inTraining0 <- createDataPartition(Seismic$class, p = .75, list = FALSE)
training <- Seismic[ inTraining0,]
testing  <- Seismic[-inTraining0,]
testingY <- as_label(Seismic[-inTraining0, ncol(Seismic)])
table(Seismic$class)
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Seismic')
t1 <- train(t1, class~., training)
plot(t1)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
