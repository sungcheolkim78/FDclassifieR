plot_ensemble(fde1)
apply(fde1@logit_matrix,2,cumsum)
apply(fde1@logit_matrix,1,cumsum)
devtools::load_all(".")
plot_ensemble(fde1)
a <- apply(fde1@logit_matrix, 1, cumsum)
str(a)
str(fde1@logit_matrix)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
?geom_text
devtools::load_all(".")
plot_ensemble(fde1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
devtools::load_all(".")
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
rownames(data_rank$predictions)
str(data_rank$predictions)
devtools::load_all(".")
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
devtools::load_all(".")
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_ensemble(fde1)
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
?geom_label_repel
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
?annotate
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
table(Sonar[,ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
plot(t1)
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
fde1 <- fde(t1$predictions, testingY)
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
auclist <- create.auclist(0.85, 0.95, 10)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
auclist <- create.auclist(0.85, 0.95, 20)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='negative')
devtools::load_all(".")
devtools::load_all(".")
plot_cor(fde1, class_flag='negative')
devtools::load_all(".")
plot_cor(fde1, class_flag='negative')
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='negative')
plot_ensemble(fde1)
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
auclist <- create.auclist(0.85, 0.95, 20)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='negative')
plot_cor(fde1, class_flag='positive')
plot_FDstatistics(fde1)
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='positive')
plot_ensemble(fde1)
auclist <- create.auclist(0.55, 0.65, 20)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='positive')
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
devtools::load_all(".")
plot_ensemble(fde1)
plot_ensemble(fde1, alpha=0.9)
plot_ensemble(fde1, alpha=0.95)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
?sum
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
auclist <- create.auclist(0.55, 0.65, 5)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_ensemble(fde1, alpha=0.95)
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
plot_ensemble(fde1, method='cor', alpha=0.95)
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
devtools::load_all(".")
cal_least_cor_list(fde1)
plot_ensemble(fde1, method='cor', alpha=0.95)
plot_ensemble(fde1, method='correlation', alpha=0.95)
source('~/CoreData/git_repos/FDclassifieR/R/ensemble.R', echo=TRUE)
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
auclist <- create.auclist(0.55, 0.65, 5)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_ensemble(fde1, method='correlation', alpha=0.95)
cal_least_cor_list(fde1)
?where
?which
devtools::load_all(".")
auclist <- create.auclist(0.55, 0.65, 5)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_ensemble(fde1, method='correlation', alpha=0.95)
auclist <- create.auclist(0.55, 0.65, 20)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='positive')
plot_ensemble(fde1, method='correlation', alpha=0.95)
plot_ensemble(fde1, method='AUC', alpha=0.95)
devtools::load_all(".")
plot_ensemble(fde1, method='random', alpha=0.95)
auclist <- create.auclist(0.85, 0.95, 20)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_cor(fde1, class_flag='positive')
plot_ensemble(fde1, method='correlation', alpha=0.95)
plot_ensemble(fde1, method='auc', alpha=0.95)
devtools::load_all(".")
plot_ensemble(fde1, method='auc', alpha=0.95)
plot_ensemble(fde1, method='random', alpha=0.95)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_cor(fde1, class_flag = 'positive')
plot_ensemble(fde1, method='correlation')
plot_ensemble(fde1, method='auc')
plot_ensemble(fde1, method='random')
devtools::load_all(".")
plot_ensemble(fde1, method='correlation')
plot_ensemble(fde1, method='auc')
plot_ensemble(fde1, method='random')
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- as_label(Iono[-inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
plot(t1)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_cor(fde1, class_flag='positive')
plot_ensemble(fde1, method='correlation')
plot_ensemble(fde1, method='auc')
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
plot(t1)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_cor(fde1, class_flag='positive')
plot_ensemble(fde1, method='correlation')
devtools::load_all(".")
plot_ensemble(fde1, method='correlation', alpha=0.8, amax=1)
plot_ensemble(fde1, method='correlation', alpha=0.8, amax=0.8)
plot_ensemble(fde1, method='auc', alpha=0.8, amax=0.8)
plot_ensemble(fde1, method='auc', alpha=0.8, amax=0.75)
plot_ensemble(fde1, method='correlation', alpha=0.8, amax=0.75)
plot_ensemble(fde1, method='auc', alpha=0.8, amax=0.75)
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- as_label(Iono[-inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_ensemble(fde1, method='auc', amax=1)
plot_ensemble(fde1, method='correlation', amax=1)
?order
devtools::load_all(".")
plot_ensemble(fde1, method='invauc', amax=1)
devtools::load_all(".")
devtools::load_all(".")
plot_ensemble(fde1, method='invauc', amax=1)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_ensemble(fde1, method='invauc', alpha=0.8, amax=0.75)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
fde1 <- fde(t1$predictions, testingY)
plot_ensemble(fde1, method='invauc', alpha=0.8)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
auclist <- create.auclist(0.85, 0.95, 20)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_ensemble(fde1, method='invauc', alpha=0.85)
auclist <- create.auclist(0.55, 0.65, 20)
data_rank <- create_predictions(n=1000, auclist=auclist, p=0.1)
fde1 <- fde(data_rank$predictions, data_rank$actual_labels)
plot_ensemble(fde1, method='invauc', alpha=0.85)
set.seed(1024)
data(Sonar)
inTraining0 <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining0,]
testing  <- Sonar[-inTraining0,]
testingY <- as_label(Sonar[-inTraining0, ncol(Sonar)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Sonar')
t1 <- predict(t1, newdata=testing)
plot_ensemble(fde1, method='correlation', alpha=0.8)
fde1 <- fde(t1$predictions, testingY)
plot_ensemble(fde1, method='correlation', alpha=0.8)
devtools::load_all(".")
plot_ensemble(fde1, method='correlation', alpha=0.8)
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(FDclassifieR)
set.seed(1024)
data(Ionosphere)
Iono <- Ionosphere
Iono <- Iono[,-2]
Iono$V1 <- as.numeric(as.character(Iono$V1))
inTraining0 <- createDataPartition(Iono$Class, p = .75, list = FALSE)
training <- Iono[ inTraining0,]
testing  <- Iono[-inTraining0,]
testingY <- as_label(Iono[-inTraining0, ncol(Iono)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Iono')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_ensemble(fde1, method='correlation', amax=1)
knitr::opts_chunk$set(echo = TRUE)
library(FDclassifieR)
set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
model_list <- c('nnet', 'rda', 'svmLinear', 'svmRadial', 'pls', 'knn', 'earth', 'avNNet', 'mlp', 'nb', 'rf', 'rpart', 'ctree', 'C5.0', 'gbm', 'bayesglm', 'glm', 'glmnet', 'simpls')
t1 <- mtrainer(model_list, dataInfo = 'Yeast')
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_ensemble(fde1, method='correlation', alpha=0.8, amax=0.75)
#set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_ensemble(fde1, method='correlation', alpha=0.8, amax=0.75)
plot_cor(fde1, class_flag='positive')
plot_ensemble(fde1, method='correlation', alpha=0.8, amax=0.75)
plot_ensemble(fde1, method='correlation', alpha=0.8)
plot_ensemble(fde1, method='invauc', alpha=0.8)
plot_ensemble(fde1, method='auc', alpha=0.8)
plot_ensemble(fde1, method='correlation', alpha=0.8)
#set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_ensemble(fde1, method='correlation', alpha=0.8)
#set.seed(1024)
#yeast <- read_table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"))
tmp <- read.table('data/yeast.csv')
names(tmp)<- c("SequenceName", "mcg", "gvh", "alm",
"mit", "erl", "pox", "vac", "nuc", "LocalizationSite")
#head(tmp)
#table(tmp$LocalizationSite)
# choose only 'CYT' and 'NUC', ignore SequnceName
Yeast <- tmp[tmp$LocalizationSite %in% c('CYT', 'NUC'), 2:10]
names(Yeast)[ncol(Yeast)] <- 'Site'
Yeast$Site <- factor(Yeast$Site, c('CYT', 'NUC'))
inTraining0 <- createDataPartition(Yeast$Site, p = .75, list = FALSE)
training <- Yeast[ inTraining0,]
testing  <- Yeast[-inTraining0,]
testingY <- as_label(Yeast[-inTraining0, ncol(Yeast)])
t1 <- predict(t1, newdata=testing)
#auclist <- apply(t1$predictions, 2, auc.rank, testingY)
fde1 <- fde(t1$predictions, testingY)
#fde1 <- predict_performance(fde1, auclist, attr(testingY, 'rho'))
plot_ensemble(fde1, method='correlation', alpha=0.8)
plot_ensemble(fde1, method='invauc', alpha=0.8)
